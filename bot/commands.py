from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import logging
from core.models import User, Expense
from core.db import SessionLocal
from core.llm import get_advice


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start:
    - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    """
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name
            )
            db.add(user)
            db.commit()
            logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name or username or '–¥—Ä—É–≥'}!\n\n"
            f"–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç. –ü–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ–Ω—å–≥–∏.\n\n"
            f"üìù <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É:</b>\n"
            f"‚Ä¢ –ù–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>-500 –∫–æ—Ñ–µ</i>\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —á–µ–∫–∞, –∏ —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Å—É–º–º—É\n\n"
            f"üìä <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            f"‚Ä¢ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n"
            f"‚Ä¢ /summary ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ —Ç—Ä–∞—Ç–∞–º\n"
            f"‚Ä¢ /stats ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"‚Ä¢ /list ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            f"‚Ä¢ /delete ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å\n"
            f"‚Ä¢ /categories ‚Äî —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
            f"‚Ä¢ /open ‚Äî –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n"
            f"–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –≤–º–µ—Å—Ç–µ!",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help"""
    await message.answer(
        "üìù <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n"
        "üßÆ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤:</b>\n"
        "‚Ä¢ <i>–°–£–ú–ú–ê –ö–ê–¢–ï–ì–û–†–ò–Ø</i> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: <i>500 –∫–æ—Ñ–µ</i> –∏–ª–∏ <i>2500 –ø—Ä–æ–¥—É–∫—Ç—ã</i>\n"
        "‚Ä¢ <i>+–°–£–ú–ú–ê –ö–ê–¢–ï–ì–û–†–ò–Ø</i> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: <i>+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞</i>\n"
        "‚Ä¢ <i>–°–£–ú–ú–ê –í–ê–õ–Æ–¢–ê –ö–ê–¢–ï–ì–û–†–ò–Ø</i> ‚Äî —É–∫–∞–∑–∞—Ç—å –≤–∞–ª—é—Ç—É\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: <i>100 USD –∫–Ω–∏–≥–∏</i>\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É: <i>500 –æ–±–µ–¥ –≤—á–µ—Ä–∞</i>\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å —á–µ–ª–æ–≤–µ–∫–∞: <i>1500 –ø–æ–¥–∞—Ä–æ–∫ @username</i>\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n\n"
        "üìä <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /summary ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º\n"
        "‚Ä¢ /stats ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "‚Ä¢ /list ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        "‚Ä¢ /delete ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å\n"
        "‚Ä¢ /categories ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "‚Ä¢ /open ‚Äî –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –≤ —Å—Ç–∏–ª–µ Cointry\n"
        "‚Ä¢ /start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º.",
        parse_mode=ParseMode.HTML
    )


@router.message(Command("summary"))
async def cmd_summary(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /summary:
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü
    - –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–≤–µ—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º
    """
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        now = datetime.now()
        today_start = datetime(now.year, now.month, now.day)
        week_start = today_start - timedelta(days=now.weekday())
        month_start = datetime(now.year, now.month, 1)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        day_expenses = db.query(Expense).filter(
            Expense.user_id == user.id,
            Expense.created_at >= today_start
        ).all()
        
        week_expenses = db.query(Expense).filter(
            Expense.user_id == user.id,
            Expense.created_at >= week_start
        ).all()
        
        month_expenses = db.query(Expense).filter(
            Expense.user_id == user.id,
            Expense.created_at >= month_start
        ).all()
        
        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
        day_sum = sum(expense.amount for expense in day_expenses)
        week_sum = sum(expense.amount for expense in week_expenses)
        month_sum = sum(expense.amount for expense in month_expenses)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç –æ—Ç LLM
        advice = get_advice(user_id, db)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—ã –≤ —Å—Ç–∏–ª–µ Cointry
        day_formatted = f"`{day_sum:.2f}`"
        week_formatted = f"`{week_sum:.2f}`"
        month_formatted = f"`{month_sum:.2f}`"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Cointry
        await message.answer(
            f"üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º:</b>\n\n"
            f"–°–µ–≥–æ–¥–Ω—è: {day_formatted} ‚ÇΩ\n"
            f"–ù–µ–¥–µ–ª—è: {week_formatted} ‚ÇΩ\n"
            f"–ú–µ—Å—è—Ü: {month_formatted} ‚ÇΩ\n\n"
            f"üí° <i>{advice}</i>",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /summary: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()

# === NEW CODE ===
from sqlalchemy import func, desc, and_, extract
import calendar
from collections import defaultdict
from aiogram.utils.markdown import code
from core.models import Transaction, Category


def format_amount_markdown(amount: float, currency: str = "‚ÇΩ") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ —Å—Ç–∏–ª–µ Cointry —Å –∫–æ–¥–æ–≤—ã–º–∏ –±–ª–æ–∫–∞–º–∏ Markdown"""
    return f"`{amount:.2f}`"


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stats –∏–ª–∏ /statistics:
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –∏ –¥–æ—Ö–æ–¥–∞–º
    - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    """
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        now = datetime.now()
        today_start = datetime(now.year, now.month, now.day)
        week_start = today_start - timedelta(days=now.weekday())
        month_start = datetime(now.year, now.month, 1)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        transactions = db.query(
            Transaction, 
            Category.name.label('category_name'), 
            Category.emoji.label('category_emoji')
        ).join(
            Category, 
            Transaction.category_id == Category.id,
            isouter=True
        ).filter(
            Transaction.user_id == user.id,
            Transaction.transaction_date >= month_start
        ).order_by(desc(Transaction.transaction_date)).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        expenses_by_category = defaultdict(float)
        expenses_total = 0
        income_by_category = defaultdict(float)
        income_total = 0
        
        for tx, cat_name, cat_emoji in transactions:
            category_name = cat_name or "–¥—Ä—É–≥–æ–µ"
            category_emoji = cat_emoji or "üí∞"
            
            if tx.is_expense == 1:  # –†–∞—Å—Ö–æ–¥
                expenses_by_category[(category_name, category_emoji)] += tx.amount
                expenses_total += tx.amount
            else:  # –î–æ—Ö–æ–¥
                income_by_category[(category_name, category_emoji)] += tx.amount
                income_total += tx.amount
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_parts = [f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {calendar.month_name[now.month]}</b>\n"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã
        if expenses_total > 0:
            response_parts.append("\n<b>–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º
            sorted_expenses = sorted(
                expenses_by_category.items(), 
                key=lambda x: x[1], 
                reverse=True
            )
            
            for (category_name, category_emoji), amount in sorted_expenses:
                percentage = (amount / expenses_total) * 100 if expenses_total > 0 else 0
                response_parts.append(
                    f"{category_emoji} {category_name.capitalize()}: {format_amount_markdown(amount)} ({percentage:.1f}%)"
                )
            
            response_parts.append(f"\n<b>–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤:</b> {format_amount_markdown(expenses_total)} ‚ÇΩ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã
        if income_total > 0:
            response_parts.append("\n<b>–î–æ—Ö–æ–¥—ã:</b>")
            
            sorted_income = sorted(
                income_by_category.items(), 
                key=lambda x: x[1], 
                reverse=True
            )
            
            for (category_name, category_emoji), amount in sorted_income:
                response_parts.append(f"{category_emoji} {category_name.capitalize()}: {format_amount_markdown(amount)}")
            
            response_parts.append(f"\n<b>–í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤:</b> {format_amount_markdown(income_total)} ‚ÇΩ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = income_total - expenses_total
        balance_emoji = "üìà" if balance >= 0 else "üìâ"
        response_parts.append(f"\n{balance_emoji} <b>–ë–∞–ª–∞–Ω—Å:</b> {format_amount_markdown(balance)} ‚ÇΩ")
        
        await message.answer("\n".join(response_parts), parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /stats: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.message(Command("list"))
async def cmd_list_transactions(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /list:
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    user_id = message.from_user.id
    limit = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions = db.query(
            Transaction, 
            Category.name.label('category_name'), 
            Category.emoji.label('category_emoji')
        ).join(
            Category, 
            Transaction.category_id == Category.id,
            isouter=True
        ).filter(
            Transaction.user_id == user.id
        ).order_by(desc(Transaction.transaction_date)).limit(limit).all()
        
        if not transactions:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = ["üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"]
        
        for i, (tx, cat_name, cat_emoji) in enumerate(transactions, start=1):
            category_name = cat_name or "–¥—Ä—É–≥–æ–µ"
            category_emoji = cat_emoji or "üí∞"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            icon = "‚ûñ" if tx.is_expense == 1 else "‚ûï"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = tx.transaction_date.strftime("%d.%m.%Y")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
            amount_str = format_amount_markdown(tx.amount)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            response.append(
                f"{i}. {icon} {date_str} {category_emoji} {category_name.capitalize()}: {amount_str} {tx.currency}"
            )
        
        await message.answer("\n".join(response), parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /list: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.message(Command("delete"))
async def cmd_delete_last(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /delete:
    - –£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    """
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        last_transaction = db.query(Transaction).filter(
            Transaction.user_id == user.id
        ).order_by(desc(Transaction.created_at)).first()
        
        if not last_transaction:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        category = db.query(Category).filter(
            Category.id == last_transaction.category_id
        ).first() if last_transaction.category_id else None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        amount = last_transaction.amount
        category_name = category.name if category else "–¥—Ä—É–≥–æ–µ"
        category_emoji = category.emoji if category else "üí∞"
        currency = last_transaction.currency
        is_expense = last_transaction.is_expense == 1
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
        db.delete(last_transaction)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ä–∞—Å—Ö–æ–¥, —Ç–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã expenses
        # –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if is_expense:
            last_expense = db.query(Expense).filter(
                Expense.user_id == user.id
            ).order_by(desc(Expense.created_at)).first()
            
            if last_expense:
                db.delete(last_expense)
        
        db.commit()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        transaction_type = "—Ä–∞—Å—Ö–æ–¥" if is_expense else "–¥–æ—Ö–æ–¥"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤ —Å—Ç–∏–ª–µ Cointry
        await message.answer(
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å:\n"
            f"<b>{category_emoji} {category_name.capitalize()}</b>\n"
            f"{'‚ûñ' if is_expense else '‚ûï'} {format_amount_markdown(amount)} {currency}",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        db.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.message(Command("categories"))
async def cmd_categories(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —ç–º–æ–¥–∑–∏"""
    from bot.expense import recognize_category, get_category_emoji
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    categories = {
        "–ø—Ä–æ–¥—É–∫—Ç—ã": "üõí –ü—Ä–æ–¥—É–∫—Ç—ã (–º–∞–≥–Ω–∏—Ç, –ø—è—Ç–µ—Ä–æ—á–∫–∞, –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫, –∞—à–∞–Ω –∏ —Ç.–¥.)",
        "–∫–∞—Ñ–µ": "‚òï –ö–∞—Ñ–µ (–∫–æ—Ñ–µ, —á–∞–π, –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è, –ø–µ–∫–∞—Ä–Ω—è)",
        "—Ä–µ—Å—Ç–æ—Ä–∞–Ω": "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã (–±–∞—Ä—ã, —Ñ–∞—Å—Ç—Ñ—É–¥, –¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã)",
        "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–º–µ—Ç—Ä–æ, –∞–≤—Ç–æ–±—É—Å, –ø—Ä–æ–µ–∑–¥)",
        "—Ç–∞–∫—Å–∏": "üöï –¢–∞–∫—Å–∏ (—è–Ω–¥–µ–∫—Å —Ç–∞–∫—Å–∏, uber, –ø–æ–µ–∑–¥–∫–∏)",
        "–æ–¥–µ–∂–¥–∞": "üëï –û–¥–µ–∂–¥–∞ (–º–∞–≥–∞–∑–∏–Ω—ã –æ–¥–µ–∂–¥—ã, –æ–Ω–ª–∞–π–Ω-—à–æ–ø–∏–Ω–≥)",
        "–æ–±—É–≤—å": "üëü –û–±—É–≤—å (–º–∞–≥–∞–∑–∏–Ω—ã –æ–±—É–≤–∏)",
        "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è (–∏–≥—Ä—ã, –∫–∏–Ω–æ, —Ç–µ–∞—Ç—Ä, –∫–æ–Ω—Ü–µ—Ä—Ç—ã)",
        "–∑–¥–æ—Ä–æ–≤—å–µ": "üíä –ó–¥–æ—Ä–æ–≤—å–µ (–∞–ø—Ç–µ–∫–∞, –≤—Ä–∞—á, –∫–ª–∏–Ω–∏–∫–∞)",
        "—Å–≤—è–∑—å": "üì± –°–≤—è–∑—å (—Ç–µ–ª–µ—Ñ–æ–Ω, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã)",
        "–∫–æ–º–º—É–Ω–∞–ª–∫–∞": "üè† –ö–æ–º–º—É–Ω–∞–ª–∫–∞ (–ñ–ö–•, –∞—Ä–µ–Ω–¥–∞, –∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞)",
        "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—É—á–µ–±–∞, –∫—É—Ä—Å—ã, –∫–Ω–∏–≥–∏)"
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    message_text = "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n"
    
    for category, description in categories.items():
        message_text += f"{description}\n"
    
    message_text += "\n<i>–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º</i>"
    
    await message.answer(message_text, parse_mode=ParseMode.HTML)


@router.message(Command("open"))
async def cmd_open(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /open:
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –≤ —Å—Ç–∏–ª–µ Cointry
    """
    await message.answer(
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "- <b>[—Å—É–º–º–∞] [–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]</b>, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã:\n"
        "  `12000 –∫—É—Ä—Ç–∫–∞ –∑–∞–º—à–µ–≤–∞—è`\n\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥ —Å—É–º–º–æ–π –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞–∫ +, –æ–Ω–∞ –∑–∞–ø–∏—à–µ—Ç—Å—è –∫–∞–∫ –¥–æ—Ö–æ–¥:\n"
        "  `+100000 –Ω–∞–∂–∏—Ç–æ –Ω–µ–ø–æ—Å–∏–ª—å–Ω—ã–º —Ç—Ä—É–¥–æ–º`\n\n"
        "‚≠ê –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∞–ª—é—Ç—É –≤ —Ç—Ä—ë—Ö–±—É–∫–≤–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å—É–º–º–∞ –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –í–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É –ø–æ –∫—É—Ä—Å—É –Ω–∞ –¥–∞—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n"
        "  `1600 USD —Ç—Ä–∏ –∫–∏–Ω–æ–∫–∞–º–µ—Ä—ã –∑–∞–≥—Ä–∞–Ω–∏—á–Ω—ã—Ö`\n\n"
        "‚≠ê –í –∫–æ–Ω–µ—Ü –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö `1.12.20` –∏–ª–∏ `2020-12-01`, –∞ —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å `–≤—á–µ—Ä–∞` –∏–ª–∏ `–ø–æ–∑–∞–≤—á–µ—Ä–∞`:\n"
        "  `4000 —Ä–µ—Å—Ç–æ—Ä–∞–Ω \"–ü–ª–∞–∫—É—á–∞—è –∏–≤–∞\" 26.12.2024`\n\n"
        "‚≠ê –ï—Å–ª–∏ –í–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä —á–∞—Å—Ç–æ –∑–∞–±—ã–≤–∞–µ—Ç –¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å–∏, –í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –∑–∞ –Ω–µ–≥–æ. –ü—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –ø–æ –∏–º–µ–Ω–∏ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ —á–µ—Ä–µ–∑ @:\n"
        "  `@durov 3600 —Ç—Ä–∏ –ø–æ—Ä—Ç—Å–∏–≥–∞—Ä–∞ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö`\n\n"
        "- `/open` - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ;\n"
        "- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–ª–∏ `/stats` - —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤;\n"
        "- –£–¥–∞–ª–∏—Ç—å –∏–ª–∏ `/delete` - —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å;\n"
        "- –ò—Å—Ç–æ—Ä–∏—è –∏–ª–∏ `/list` - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π;\n"
        "- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ `/categories` - –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏;",
        parse_mode=ParseMode.HTML
    ) 