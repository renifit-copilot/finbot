from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.enums import ParseMode
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import logging
from core.models import User, Expense, Transaction, Category, CategoryCache
from core.db import SessionLocal
from core.llm import categorize_transaction
from sqlalchemy import func, desc, and_, extract
import calendar
from collections import defaultdict
from aiogram.utils.markdown import code
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import matplotlib.pyplot as plt
import io
import os
import pandas as pd
import numpy as np
from typing import List, Dict, Any, Tuple


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
router = Router()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è")
            ],
            [
                KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                KeyboardButton(text="–ü–æ–º–æ—â—å")
            ],
            [
                KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞")
            ],
            [
                KeyboardButton(text="–°–∫—Ä—ã—Ç—å –º–µ–Ω—é")
            ]
        ],
        resize_keyboard=True,  # –£–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
        input_field_placeholder="550 —à–∞—É—Ä–º–∞"  # –¢–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    )
    return keyboard


@router.message(Command("menu"))
async def cmd_menu(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
    """
    await message.answer(
        "–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )


@router.message(lambda message: message.text == "–°–∫—Ä—ã—Ç—å –º–µ–Ω—é")
async def hide_menu(message: Message):
    """
    –°–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
    """
    await message.answer(
        "–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /menu",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    await cmd_stats(message)


@router.message(lambda message: message.text == "–ò—Å—Ç–æ—Ä–∏—è")
async def show_history_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ò—Å—Ç–æ—Ä–∏—è"""
    await cmd_list_transactions(message)


@router.message(lambda message: message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await cmd_categories(message)


@router.message(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def show_help_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    await cmd_help(message)


@router.message(lambda message: message.text == "–ü–æ–¥–ø–∏—Å–∫–∞")
async def show_subscription_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–¥–ø–∏—Å–∫–∞"""
    await message.answer(
        "üåü <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
        "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
        "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –±—É–¥—É—â–µ–º.",
        parse_mode=ParseMode.HTML
    )


@router.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start:
    - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    - –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
    """
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.query(User).filter(User.telegram_id == user_id).first()

        is_new_user = False
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name
            )
            db.add(user)
            db.commit()
            db.refresh(user)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
            is_new_user = True
            logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            standard_categories = [
                # –†–∞—Å—Ö–æ–¥—ã
                {"name": "–ø—Ä–æ–¥—É–∫—Ç—ã", "emoji": "üå±", "is_expense": 1},
                {"name": "–µ–¥–∞ –≤–Ω–µ –¥–æ–º–∞", "emoji": "üçî", "is_expense": 1},
                {"name": "–±—ã—Ç", "emoji": "üè°", "is_expense": 1},
                {"name": "–æ–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å", "emoji": "üëî", "is_expense": 1},
                {"name": "–∑–¥–æ—Ä–æ–≤—å–µ –∏ –∫—Ä–∞—Å–æ—Ç–∞", "emoji": "üíä", "is_expense": 1},
                {"name": "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "emoji": "üöó", "is_expense": 1},
                {"name": "—Å–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "emoji": "üì±", "is_expense": 1},
                {"name": "–∂–∏–ª—å—ë –∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
                    "emoji": "üè†", "is_expense": 1},
                {"name": "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "emoji": "üéÆ", "is_expense": 1},

                # –î–æ—Ö–æ–¥—ã
                {"name": "–∑–∞—Ä–ø–ª–∞—Ç–∞", "emoji": "üí∞", "is_expense": 0},
                {"name": "–¥—Ä—É–≥–æ–µ", "emoji": "üí∏", "is_expense": 0}
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î
            for cat_data in standard_categories:
                category = Category(
                    user_id=user.id,
                    name=cat_data["name"].lower(),
                    emoji=cat_data["emoji"],
                    is_expense=cat_data["is_expense"]
                )
                db.add(category)

            db.commit()

            # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                # rebuild_category_cache(db, user.id) # –£–¥–∞–ª–µ–Ω–æ
                pass  # –£–¥–∞–ª–µ–Ω–æ
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π —Å–ø—Ä–∞–≤–∫–æ–π
        await message.answer(
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {first_name or username or '–¥—Ä—É–≥'}! –Ø –ø–æ–º–æ—â–Ω–∏–∫ Finbot! </b>\n\n"
            f"<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏ —è –∑–∞–ø–∏—à—É –∏—Ö:</b>\n\n"
            f"<blockquote>[—Å–∫–æ–ª—å–∫–æ] [–Ω–∞ —á—Ç–æ]</blockquote>\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            f"<blockquote>2500 –ø—Ä–æ–¥—É–∫—Ç—ã</blockquote>\n\n"
            f"–ê —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –¥–æ—Ö–æ–¥, –¥–æ–±–∞–≤—å—Ç–µ –≤–ø–µ—Ä–µ–¥–∏ + –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞:\n"
            f"<blockquote>+10000 –∞–≤–∞–Ω—Å</blockquote>\n\n"
            f"–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b> –∏–ª–∏ /categories.\n\n"
            f"–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> –∏–ª–∏ /stats.\n\n"
            f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>–£–¥–∞–ª–∏—Ç—å</b> –∏–ª–∏ /delete.\n\n"
            f"–ö—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π <b>–û—Ç—á–µ—Ç</b> –∏–ª–∏ /summary.\n\n"
            f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /list.\n\n"
            f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º.",
            parse_mode=ParseMode.HTML
        )

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")]
            ],
            resize_keyboard=True,
            input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"
        )
        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:",
            reply_markup=keyboard
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.message(lambda message: message.text == "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
async def open_menu_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"""
    await cmd_menu(message)


@router.message(Command("help"))
async def cmd_help(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞
    """
    help_text = (
        "üìã <b>–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´</b>\n\n"

        "<b>–û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
        "/summary - –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü\n"
        "/stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "/list - –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        "\n"

        "<b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò</b>\n"
        "100 –ø—Ä–æ–¥—É–∫—Ç—ã - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ (100 ‚ÇΩ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã)\n"
        "-100 —Ç–∞–∫—Å–∏ - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å —Ä–∞—Å—Ö–æ–¥–∞\n"
        "+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞ - –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥\n"
        "/delete - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n"
        "\n"

        "<b>–ö–ê–¢–ï–ì–û–†–ò–ò –ò –ù–ê–°–¢–†–û–ô–ö–ò</b>\n"
        "/categories - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "\n"

        "<i>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –ø—Ä–æ–¥—É–∫—Ç—ã</i>"
    )

    await message.answer(help_text, parse_mode=ParseMode.HTML)


@router.message(Command("summary"))
async def cmd_summary(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /summary:
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü
    - –î–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –±—é–¥–∂–µ—Ç—É
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ (—Ä–æ—Å—Ç/—Å–Ω–∏–∂–µ–Ω–∏–µ)
    - –î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º
    """
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if not user:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        now = datetime.now()
        today_start = datetime(now.year, now.month, now.day)
        yesterday_start = today_start - timedelta(days=1)
        week_start = today_start - timedelta(days=now.weekday())
        prev_week_start = week_start - timedelta(days=7)
        month_start = datetime(now.year, now.month, 1)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã
        day_expenses = db.query(Expense).filter(
            Expense.user_id == user.id,
            Expense.created_at >= today_start
        ).all()

        week_expenses = db.query(Expense).filter(
            Expense.user_id == user.id,
            Expense.created_at >= week_start
        ).all()

        month_expenses = db.query(Expense).filter(
            Expense.user_id == user.id,
            Expense.created_at >= month_start
        ).all()

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        yesterday_expenses = db.query(Expense).filter(
            Expense.user_id == user.id,
            Expense.created_at >= yesterday_start,
            Expense.created_at < today_start
        ).all()

        prev_week_expenses = db.query(Expense).filter(
            Expense.user_id == user.id,
            Expense.created_at >= prev_week_start,
            Expense.created_at < week_start
        ).all()

        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
        day_sum = sum(expense.amount for expense in day_expenses)
        yesterday_sum = sum(expense.amount for expense in yesterday_expenses)
        week_sum = sum(expense.amount for expense in week_expenses)
        prev_week_sum = sum(expense.amount for expense in prev_week_expenses)
        month_sum = sum(expense.amount for expense in month_expenses)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        days_in_month = calendar.monthrange(now.year, now.month)[1]
        days_passed = now.day

        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –º–µ—Å—è—Ü, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ —Ö–æ—Ç—è –±—ã 3 –¥–Ω—è
        monthly_forecast = 0
        if days_passed >= 3:
            daily_avg = month_sum / days_passed
            monthly_forecast = daily_avg * days_in_month

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ (—Ä–æ—Å—Ç/—Å–Ω–∏–∂–µ–Ω–∏–µ)
        day_trend = "‚û°Ô∏è"  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if yesterday_sum > 0:
            day_trend = "üìâ" if day_sum < yesterday_sum else "üìà" if day_sum > yesterday_sum else "‚û°Ô∏è"

        week_trend = "‚û°Ô∏è"
        if prev_week_sum > 0:
            week_trend = "üìâ" if week_sum < prev_week_sum else "üìà" if week_sum > prev_week_sum else "‚û°Ô∏è"

        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–µ—Å—è—á–Ω–æ–º—É –±—é–¥–∂–µ—Ç—É
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç - —ç—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ –∏–ª–∏ 2x –æ—Ç —Ç–µ–∫—É—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤, –µ—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ—Ç
        monthly_budget = monthly_forecast if monthly_forecast > 0 else month_sum * 2
        if monthly_budget == 0:  # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤, —É—Å—Ç–∞–Ω–æ–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
            monthly_budget = 10000

        progress_percent = min(100, int((month_sum / monthly_budget) * 100))

        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_bar_length = 10
        filled_blocks = int((progress_percent / 100) * progress_bar_length)
        progress_bar = "‚ñà" * filled_blocks + "‚ñí" * \
            (progress_bar_length - filled_blocks)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç –æ—Ç LLM
        # advice = get_advice(user_id, db) # –£–¥–∞–ª–µ–Ω–æ
        advice = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç."  # –£–¥–∞–ª–µ–Ω–æ

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—ã
        day_formatted = f"{day_sum:.2f}"
        week_formatted = f"{week_sum:.2f}"
        month_formatted = f"{month_sum:.2f}"
        forecast_formatted = f"{monthly_forecast:.2f}" if monthly_forecast > 0 else "N/A"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"<b>–§–ò–ù–ê–ù–°–û–í–ê–Ø –°–í–û–î–ö–ê</b>\n\n"
            f"<b>–°–µ–≥–æ–¥–Ω—è:</b> {day_trend} <code>{day_formatted}</code> ‚ÇΩ\n"
            f"<b>–ù–µ–¥–µ–ª—è:</b> {week_trend} <code>{week_formatted}</code> ‚ÇΩ\n"
            f"<b>–ú–µ—Å—è—Ü:</b> <code>{month_formatted}</code> ‚ÇΩ\n\n"
            f"<b>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –±—é–¥–∂–µ—Ç—É:</b> {progress_percent}%\n"
            f"<code>{progress_bar}</code>\n\n"
            f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü:</b> <code>{forecast_formatted}</code> ‚ÇΩ\n\n"
            f"<blockquote>{advice}</blockquote>\n\n"
            f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</i>",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /summary: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


def format_amount_markdown(amount: float, currency: str = "‚ÇΩ") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ —Å—Ç–∏–ª–µ Cointry —Å –∫–æ–¥–æ–≤—ã–º–∏ –±–ª–æ–∫–∞–º–∏ Markdown"""
    return f"`{amount:.2f}`"


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stats –∏–ª–∏ /statistics:
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –∏ –¥–æ—Ö–æ–¥–∞–º
    - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
    - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
    - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤
    """
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if not user:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        now = datetime.now()
        today_start = datetime(now.year, now.month, now.day)
        month_start = datetime(now.year, now.month, 1)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        if now.month == 1:
            prev_month_start = datetime(now.year - 1, 12, 1)
            prev_month_end = datetime(now.year, 1, 1)
        else:
            prev_month_start = datetime(now.year, now.month - 1, 1)
            prev_month_end = month_start

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_transactions = db.query(
            Transaction,
            Category.name.label('category_name'),
            Category.emoji.label('category_emoji')
        ).join(
            Category,
            Transaction.category_id == Category.id,
            isouter=True
        ).filter(
            Transaction.user_id == user.id,
            Transaction.transaction_date >= month_start
        ).order_by(desc(Transaction.transaction_date)).all()

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        prev_transactions = db.query(
            Transaction,
            Category.name.label('category_name'),
            Category.emoji.label('category_emoji')
        ).join(
            Category,
            Transaction.category_id == Category.id,
            isouter=True
        ).filter(
            Transaction.user_id == user.id,
            Transaction.transaction_date >= prev_month_start,
            Transaction.transaction_date < prev_month_end
        ).all()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        expenses_by_category = defaultdict(float)
        expenses_total = 0
        income_by_category = defaultdict(float)
        income_total = 0

        for tx, cat_name, cat_emoji in current_transactions:
            category_name = cat_name or "–¥—Ä—É–≥–æ–µ"
            category_emoji = cat_emoji or "üí∞"

            if tx.is_expense == 1:  # –†–∞—Å—Ö–æ–¥
                expenses_by_category[(
                    category_name, category_emoji)] += tx.amount
                expenses_total += tx.amount
            else:  # –î–æ—Ö–æ–¥
                income_by_category[(
                    category_name, category_emoji)] += tx.amount
                income_total += tx.amount

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        prev_expenses_by_category = defaultdict(float)
        prev_expenses_total = 0
        prev_income_total = 0

        for tx, cat_name, cat_emoji in prev_transactions:
            category_name = cat_name or "–¥—Ä—É–≥–æ–µ"
            category_emoji = cat_emoji or "üí∞"

            if tx.is_expense == 1:  # –†–∞—Å—Ö–æ–¥
                prev_expenses_by_category[(
                    category_name, category_emoji)] += tx.amount
                prev_expenses_total += tx.amount
            else:  # –î–æ—Ö–æ–¥
                prev_income_total += tx.amount

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        month_name = calendar.month_name[now.month]
        prev_month_name = calendar.month_name[prev_month_start.month]

        response_parts = [f"<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê {month_name.upper()}</b>\n"]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
        response_parts.append("<b>–û–ë–©–ê–Ø –°–í–û–î–ö–ê:</b>")

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º
        expense_change = 0
        expense_change_percent = 0
        if prev_expenses_total > 0:
            expense_change = expenses_total - prev_expenses_total
            expense_change_percent = (
                expense_change / prev_expenses_total) * 100

        expense_trend = "‚û°Ô∏è"
        if expense_change_percent > 5:
            expense_trend = "üìà"
        elif expense_change_percent < -5:
            expense_trend = "üìâ"

        income_change = 0
        income_change_percent = 0
        if prev_income_total > 0:
            income_change = income_total - prev_income_total
            income_change_percent = (income_change / prev_income_total) * 100

        income_trend = "‚û°Ô∏è"
        if income_change_percent > 5:
            income_trend = "üìà"
        elif income_change_percent < -5:
            income_trend = "üìâ"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º
        response_parts.append(
            f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: <code>{expenses_total:.2f}</code> ‚ÇΩ {expense_trend}\n"
            f"‚Ä¢ –î–æ—Ö–æ–¥—ã: <code>{income_total:.2f}</code> ‚ÇΩ {income_trend}\n"
            f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: <code>{income_total - expenses_total:.2f}</code> ‚ÇΩ\n"
        )

        if prev_expenses_total > 0 or prev_income_total > 0:
            response_parts.append(
                f"<i>–ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å {prev_month_name}:</i>\n"
                f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {'+' if expense_change >= 0 else ''}{expense_change:.2f} ‚ÇΩ ({'+' if expense_change_percent >= 0 else ''}{expense_change_percent:.1f}%)\n"
                f"‚Ä¢ –î–æ—Ö–æ–¥—ã: {'+' if income_change >= 0 else ''}{income_change:.2f} ‚ÇΩ ({'+' if income_change_percent >= 0 else ''}{income_change_percent:.1f}%)\n"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        if expenses_total > 0:
            response_parts.append("\n<b>–†–ê–°–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:</b>")

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º
            sorted_expenses = sorted(
                expenses_by_category.items(),
                key=lambda x: x[1],
                reverse=True
            )

            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            top_categories = sorted_expenses[:5]
            max_amount = top_categories[0][1] if top_categories else 0

            for (category_name, category_emoji), amount in top_categories:
                percentage = (amount / expenses_total) * 100
                bar_length = int((amount / max_amount) *
                                 10) if max_amount > 0 else 0
                bar = "‚ñà" * bar_length + "‚ñí" * (10 - bar_length)

                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º
                prev_amount = prev_expenses_by_category.get(
                    (category_name, category_emoji), 0)
                change_str = ""
                if prev_amount > 0:
                    change = amount - prev_amount
                    change_percent = (change / prev_amount) * 100
                    change_symbol = "‚ÜóÔ∏è" if change > 0 else "‚ÜòÔ∏è" if change < 0 else "‚ÜîÔ∏è"
                    change_str = f" {change_symbol} {change_percent:.1f}%"

                response_parts.append(
                    f"{category_emoji} {category_name.capitalize()}: <code>{amount:.2f}</code> ‚ÇΩ ({percentage:.1f}%){change_str}\n"
                    f"<code>{bar}</code>"
                )

            # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ
            if len(sorted_expenses) > 5:
                other_sum = sum(amount for (_, _),
                                amount in sorted_expenses[5:])
                other_percentage = (other_sum / expenses_total) * 100
                response_parts.append(
                    f"\n–î—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <code>{other_sum:.2f}</code> ‚ÇΩ ({other_percentage:.1f}%)")

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã
        if income_total > 0:
            response_parts.append("\n<b>–î–û–•–û–î–´:</b>")

            sorted_income = sorted(
                income_by_category.items(),
                key=lambda x: x[1],
                reverse=True
            )

            for (category_name, category_emoji), amount in sorted_income:
                percentage = (amount / income_total) * 100
                response_parts.append(
                    f"{category_emoji} {category_name.capitalize()}: <code>{amount:.2f}</code> ‚ÇΩ ({percentage:.1f}%)")

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        days_passed = now.day
        avg_daily_expense = expenses_total / days_passed if days_passed > 0 else 0
        days_in_month = calendar.monthrange(now.year, now.month)[1]
        days_left = days_in_month - days_passed

        response_parts.append(
            f"\n<b>–î–ù–ï–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –¥–µ–Ω—å: <code>{avg_daily_expense:.2f}</code> ‚ÇΩ\n"
            f"‚Ä¢ –î–Ω–µ–π –ø—Ä–æ—à–ª–æ: {days_passed} –∏–∑ {days_in_month}\n"
            f"‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü: <code>{avg_daily_expense * days_in_month:.2f}</code> ‚ÇΩ"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if expenses_total > 0:
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–æ—Å—Ç–æ–º —Ä–∞—Å—Ö–æ–¥–æ–≤
            biggest_increase = None
            biggest_increase_percent = 0

            for (category_name, category_emoji), amount in expenses_by_category.items():
                prev_amount = prev_expenses_by_category.get(
                    (category_name, category_emoji), 0)
                if prev_amount > 0:
                    change_percent = (
                        (amount - prev_amount) / prev_amount) * 100
                    if change_percent > biggest_increase_percent:
                        biggest_increase = (category_name, category_emoji)
                        biggest_increase_percent = change_percent

            if biggest_increase and biggest_increase_percent > 20:
                category_name, category_emoji = biggest_increase
                response_parts.append(
                    f"\nüí° <i>–°–æ–≤–µ—Ç: –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_emoji} {category_name.capitalize()} ‚Äî "
                    f"—Ä–∞—Å—Ö–æ–¥—ã –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ {biggest_increase_percent:.1f}% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º</i>"
                )

        await message.answer("\n".join(response_parts), parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /stats: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.message(Command("list"))
async def cmd_list_transactions(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /list:
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    - –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ç–æ–≥–∏ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    """
    user_id = message.from_user.id
    limit = 15  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if not user:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions = db.query(
            Transaction,
            Category.name.label('category_name'),
            Category.emoji.label('category_emoji')
        ).join(
            Category,
            Transaction.category_id == Category.id,
            isouter=True
        ).filter(
            Transaction.user_id == user.id
        ).order_by(desc(Transaction.transaction_date)).limit(limit).all()

        if not transactions:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º
        transactions_by_day = {}
        for tx, cat_name, cat_emoji in transactions:
            date_key = tx.transaction_date.strftime("%Y-%m-%d")
            date_display = tx.transaction_date.strftime("%d.%m.%Y")

            if date_key not in transactions_by_day:
                transactions_by_day[date_key] = {
                    "display_date": date_display,
                    "transactions": [],
                    "expenses": 0,
                    "income": 0
                }

            category_name = cat_name or "–¥—Ä—É–≥–æ–µ"
            category_emoji = cat_emoji or "üí∞"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—É–º–º–µ
            if tx.is_expense == 1:
                transactions_by_day[date_key]["expenses"] += tx.amount
            else:
                transactions_by_day[date_key]["income"] += tx.amount

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions_by_day[date_key]["transactions"].append({
                "id": tx.id,
                "amount": tx.amount,
                "currency": tx.currency,
                "category_name": category_name,
                "category_emoji": category_emoji,
                "is_expense": tx.is_expense == 1,
                "description": tx.description
            })

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = ["<b>–ò–°–¢–û–†–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô</b>\n"]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º
        for date_key, day_data in transactions_by_day.items():
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
            day_balance = day_data["income"] - day_data["expenses"]
            balance_sign = "+" if day_balance >= 0 else "-"
            balance_emoji = "üìà" if day_balance >= 0 else "üìâ"

            response.append(
                f"\n<b>{day_data['display_date']} {balance_emoji}</b>\n\n"
                f"<i>–†–∞—Å—Ö–æ–¥—ã: <code>{day_data['expenses']:.2f}</code> ‚ÇΩ ‚Ä¢ "
                f"–î–æ—Ö–æ–¥—ã: <code>{day_data['income']:.2f}</code> ‚ÇΩ ‚Ä¢ "
                f"–ë–∞–ª–∞–Ω—Å: <code>{balance_sign}{abs(day_balance):.2f}</code> ‚ÇΩ</i>\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –¥–µ–Ω—å
            for tx in day_data["transactions"]:
                icon = "‚ûñ" if tx["is_expense"] else "‚ûï"
                amount_str = f"{tx['amount']:.2f}"

                response.append(
                    f"{icon} {tx['category_emoji']} <b>{tx['category_name'].capitalize()}</b>: "
                    f"<code>{amount_str}</code> {tx['currency']}"
                )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        response.append(
            f"\n<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</i>\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: /list –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ /list –∫–∞—Ñ–µ</i>"
        )

        await message.answer("\n".join(response), parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /list: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.message(Command("delete"))
async def cmd_delete_last(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /delete:
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    - –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é
    """
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if not user:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ 5 —à—Ç—É–∫)
        recent_transactions = db.query(
            Transaction,
            Category.name.label('category_name'),
            Category.emoji.label('category_emoji')
        ).join(
            Category,
            Transaction.category_id == Category.id,
            isouter=True
        ).filter(
            Transaction.user_id == user.id
        ).order_by(desc(Transaction.created_at)).limit(5).all()

        if not recent_transactions:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        last_tx, last_cat_name, last_cat_emoji = recent_transactions[0]
        last_category_name = last_cat_name or "–¥—Ä—É–≥–æ–µ"
        last_category_emoji = last_cat_emoji or "üí∞"

        builder.button(
            text=f"–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é: {last_category_emoji} {last_category_name} ({last_tx.amount} {last_tx.currency})",
            callback_data=f"delete_confirm:{last_tx.id}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        for tx, cat_name, cat_emoji in recent_transactions:
            category_name = cat_name or "–¥—Ä—É–≥–æ–µ"
            category_emoji = cat_emoji or "üí∞"
            date_str = tx.transaction_date.strftime("%d.%m")

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é (–ø–æ—Å–ª–µ–¥–Ω—é—é) —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤—ã—à–µ
            if tx.id == last_tx.id:
                continue

            builder.button(
                text=f"{date_str}: {category_emoji} {category_name} ({tx.amount} {tx.currency})",
                callback_data=f"delete_tx:{tx.id}"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="delete_cancel"
        )

        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
        builder.adjust(1)

        await message.answer(
            "üóëÔ∏è <b>–£–î–ê–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ô</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.callback_query(F.data.startswith("delete_tx:"))
async def process_delete_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ callback_data
    tx_id = int(callback.data.split(":")[1])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
        callback_data=f"delete_confirm:{tx_id}"
    )
    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="delete_cancel"
    )
    builder.adjust(2)

    await callback.message.edit_text(
        "‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )


@router.callback_query(F.data.startswith("delete_confirm:"))
async def process_delete_confirm(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ callback_data
    tx_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if not user:
            await callback.message.edit_text("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return

        # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ ID
        transaction = db.query(Transaction).filter(
            Transaction.id == tx_id,
            Transaction.user_id == user.id
        ).first()

        if not transaction:
            await callback.message.edit_text("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        category = db.query(Category).filter(
            Category.id == transaction.category_id
        ).first() if transaction.category_id else None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        amount = transaction.amount
        category_name = category.name if category else "–¥—Ä—É–≥–æ–µ"
        category_emoji = category.emoji if category else "üí∞"
        currency = transaction.currency
        is_expense = transaction.is_expense == 1

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
        db.delete(transaction)

        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ä–∞—Å—Ö–æ–¥, —Ç–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã expenses
        # –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if is_expense:
            expense = db.query(Expense).filter(
                Expense.user_id == user.id,
                Expense.created_at == transaction.transaction_date
            ).first()

            if expense:
                db.delete(expense)

        db.commit()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        transaction_type = "—Ä–∞—Å—Ö–æ–¥" if is_expense else "–¥–æ—Ö–æ–¥"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        await callback.message.edit_text(
            f"‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞</b>\n\n"
            f"<b>{category_emoji} {category_name.capitalize()}</b>\n"
            f"{'‚ûñ' if is_expense else '‚ûï'} <code>{amount:.2f}</code> {currency}",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        db.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()


@router.callback_query(F.data == "delete_cancel")
async def process_delete_cancel(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    await callback.message.edit_text(
        "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
        parse_mode=ParseMode.HTML
    )


@router.message(Command("categories"))
async def cmd_categories(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç–º–æ–¥–∑–∏
    """
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if not user:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        expense_categories = db.query(Category).filter(
            Category.user_id == user.id,
            Category.is_expense == 1
        ).all()

        income_categories = db.query(Category).filter(
            Category.user_id == user.id,
            Category.is_expense == 0
        ).all()

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–±—Ä–æ—Å–∏—Ç—å
        if not expense_categories and not income_categories:
            await message.answer(
                "üìã <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—è –∏—Ö –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.",
                parse_mode=ParseMode.HTML
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        message_text = "üìã <b>–í–ê–®–ò –ö–ê–¢–ï–ì–û–†–ò–ò</b>\n\n"

        if expense_categories:
            message_text += "<b>üì§ –†–∞—Å—Ö–æ–¥—ã:</b>\n"
            for category in expense_categories:
                message_text += f"  ‚Ä¢ {category.emoji} {category.name.capitalize()}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –¥–æ—Ö–æ–¥–æ–≤
        if income_categories:
            message_text += "\n<b>üì• –î–æ—Ö–æ–¥—ã:</b>\n"
            for category in income_categories:
                message_text += f"  ‚Ä¢ {category.emoji} {category.name.capitalize()}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        message_text += (
            "\n<b>–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:</b>\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä: <code>500 –ø—Ä–æ–¥—É–∫—Ç—ã</code> –∏–ª–∏ <code>250 –µ–¥–∞ –≤–Ω–µ –¥–æ–º–∞</code>\n"
            "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n\n"
            "<i>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—è –∏—Ö –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö</i>"
        )

        await message.answer(message_text, parse_mode=ParseMode.HTML)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    finally:
        db.close()
