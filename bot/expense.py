from aiogram import Router, types, F
from aiogram.types import Message, FSInputFile
from aiogram.enums import ParseMode
from sqlalchemy.orm import Session
import re
import os
import uuid
from datetime import datetime, timedelta
import logging
from core.models import User, Expense as ExpenseModel, Category, Transaction
from core.db import SessionLocal
from core.ocr import parse_receipt
from core.llm import categorize_transaction
from typing import Optional, Dict, Any


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
router = Router()


@router.message(F.text.regexp(r'^-\d+(?:[.,]\d+)?\s+\w+.*$'))
async def process_expense_message(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ: -–°–£–ú–ú–ê –ö–ê–¢–ï–ì–û–†–ò–Ø
    –ù–∞–ø—Ä–∏–º–µ—Ä: -150 –∫–æ—Ñ–µ, -2500 –ø—Ä–æ–¥—É–∫—Ç—ã
    """
    user_id = message.from_user.id
    
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        match = re.match(r'^-(\d+(?:[.,]\d+)?)\s+(.+)$', message.text)
        if not match:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: -–°–£–ú–ú–ê –ö–ê–¢–ï–ì–û–†–ò–Ø")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        amount_str = match.group(1).replace(',', '.')
        amount = float(amount_str)
        category_input = match.group(2).strip().lower()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            user = db.query(User).filter(User.telegram_id == user_id).first()
            
            if not user:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Å /start
                await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = categorize_transaction(category_input, db, user.id)
            
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if not category:
                category = category_input
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ
            expense = ExpenseModel(
                user_id=user.id,
                amount=amount,
                category=category,
                description=message.text
            )
            
            db.add(expense)
            db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_emoji = get_category_emoji(category)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ —Å—Ç–∏–ª–µ Cointry
            formatted_amount = f"`{amount:.2f}`"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Cointry
            await message.answer(
                f"<b>{category_emoji} {category.capitalize()}</b>\n"
                f"‚ûñ {formatted_amount} ‚ÇΩ",
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            db.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            db.close()
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—Å—Ö–æ–¥–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.photo)
async def process_receipt_photo(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ–∫–æ–≤:
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    - –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR
    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—Ö–æ–¥ –≤ –ë–î
    """
    user_id = message.from_user.id
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ–∫...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        receipts_dir = "receipts"
        os.makedirs(receipts_dir, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_uuid = uuid.uuid4()
        photo_path = os.path.join(receipts_dir, f"{file_uuid}.jpg")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º –±–æ–ª—å—à–æ–º —Ä–∞–∑–º–µ—Ä–µ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_info = await message.bot.get_file(photo.file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        await message.bot.download_file(file_info.file_path, destination=photo_path)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR
        amount, category_input = parse_receipt(photo_path)
        
        if amount <= 0:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É –Ω–∞ —á–µ–∫–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: -–°–£–ú–ú–ê –ö–ê–¢–ï–ì–û–†–ò–Ø"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            user = db.query(User).filter(User.telegram_id == user_id).first()
            
            if not user:
                await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —á–µ–∫–∞
            receipt_info = f"–ß–µ–∫ –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±. –ú–∞–≥–∞–∑–∏–Ω: {category_input}"
            category = categorize_transaction(receipt_info, db, user.id)
            
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é –∏–∑ OCR
            if not category:
                category = recognize_category(category_input)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ
            expense = ExpenseModel(
                user_id=user.id,
                amount=amount,
                category=category,
                description=f"–ß–µ–∫ –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±.",
                receipt_path=photo_path
            )
            
            db.add(expense)
            db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_emoji = get_category_emoji(category)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ —Å—Ç–∏–ª–µ Cointry
            formatted_amount = f"`{amount:.2f}`"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Cointry
            await message.answer(
                f"<b>{category_emoji} {category.capitalize()}</b>\n"
                f"‚ûñ {formatted_amount} ‚ÇΩ\n\n"
                f"<i>–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –≤—Ä—É—á–Ω—É—é</i>",
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            db.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ –∏–∑ —á–µ–∫–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            db.close()
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤—Ä—É—á–Ω—É—é.")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            await processing_msg.delete()
        except:
            pass 

# === NEW CODE ===
import re
from datetime import datetime, timedelta
from typing import Tuple, Optional, Dict, List
import json
from sqlalchemy import desc, func


# –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
CATEGORY_EMOJI = {
    "–ø—Ä–æ–¥—É–∫—Ç—ã": "üõí",
    "–∫–∞—Ñ–µ": "üçî",
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "üöó",
    "—Ç–∞–∫—Å–∏": "üöï",
    "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üé≠",
    "–∫–∏–Ω–æ": "üé¨",
    "–∑–¥–æ—Ä–æ–≤—å–µ": "üíä",
    "–æ–¥–µ–∂–¥–∞": "üëï",
    "–æ–±—É–≤—å": "üëü",
    "—Å–≤—è–∑—å": "üìû",
    "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç": "üåê",
    "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "üìö",
    "—Å–ø–æ—Ä—Ç": "üèãÔ∏è",
    "–ø–æ–¥–∞—Ä–∫–∏": "üéÅ",
    "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "‚úàÔ∏è",
    "–¥–æ–º": "üè†",
    "—Ç–µ—Ö–Ω–∏–∫–∞": "üì±",
    "–∑–∞—Ä–ø–ª–∞—Ç–∞": "üíº",
    "–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã": "‚úèÔ∏è",
    "–±—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è": "üßº",
    "—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã": "üçΩÔ∏è",
    "–¥—Ä—É–≥–æ–µ": "üí∞"
}

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å—É–º–º—ã: —á–∏—Å–ª–æ —Å –æp –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç-–±–ª–æ–∫–∏ –≤ —Å—Ç–∏–ª–µ Cointry—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç—å—é
AMOUNT_PATTERN = r'(-?\d+(?:[.,]\d+)?)'

# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤–∞–ª—é—Ç—ã: —Ç—Ä–∏ –±—É–∫–≤—ã –ø–æ—Å–ª–µ —Å—É–º–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD –∏–ª–∏ RUB)
CURRENCY_PATTERN = r'([A-Za-z]{3})'

# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @username
MENTION_PATTERN = r'@(\w+)'

# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–∞—Ç—ã –≤ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö: —Ü–∏—Ñ—Ä–æ–≤–æ–π (01.01.2024 –∏–ª–∏ 2024-01-01) –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π (–≤—á–µ—Ä–∞, –ø–æ–∑–∞–≤—á–µ—Ä–∞)
DATE_PATTERN = r'(\d{1,2}[.-]\d{1,2}[.-]\d{2,4}|\d{4}-\d{1,2}-\d{1,2}|–≤—á–µ—Ä–∞|–ø–æ–∑–∞–≤—á–µ—Ä–∞)'


def get_category_emoji(category_name: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    Args:
        category_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
    Returns:
        str: —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    # –°–ª–æ–≤–∞—Ä—å —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_emojis = {
        "–ø—Ä–æ–¥—É–∫—Ç—ã": "üõí",
        "–µ–¥–∞": "üçî",
        "–∫–∞—Ñ–µ": "‚òï",
        "—Ä–µ—Å—Ç–æ—Ä–∞–Ω": "üçΩÔ∏è",
        "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "üöó",
        "—Ç–∞–∫—Å–∏": "üöï",
        "–æ–¥–µ–∂–¥–∞": "üëï",
        "–æ–±—É–≤—å": "üëü",
        "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üéÆ",
        "–∫–∏–Ω–æ": "üé¨",
        "–ø–æ–¥–∞—Ä–∫–∏": "üéÅ",
        "–∑–¥–æ—Ä–æ–≤—å–µ": "üíä",
        "–∞–ø—Ç–µ–∫–∞": "üíä",
        "—Å–≤—è–∑—å": "üì±",
        "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç": "üåê",
        "–∫–æ–º–º—É–Ω–∞–ª–∫–∞": "üè†",
        "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "üìö",
        "—Å–ø–æ—Ä—Ç": "üèãÔ∏è",
        "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "‚úàÔ∏è",
        "–∑–∞—Ä–ø–ª–∞—Ç–∞": "üíµ",
        "–¥–æ—Ö–æ–¥": "üí∞",
        "–¥—Ä—É–≥–æ–µ": "üìã"
    }
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    category_name = category_name.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ
    for key, emoji in category_emojis.items():
        if key in category_name:
            return emoji
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return "üìã"


def format_amount(amount: float, currency: str = "RUB") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ —Å—Ç–∏–ª–µ Cointry"""
    if currency == "RUB":
        return f"`{amount:.2f}`"
    return f"`{amount:.2f} {currency}`"


def recognize_category(text: str) -> str:
    """
    –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    
    Args:
        text: —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        str: —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    """
    # –°–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    category_keywords = {
        "–ø—Ä–æ–¥—É–∫—Ç—ã": [
            # –ú–∞–≥–∞–∑–∏–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            "–º–∞–≥–Ω–∏—Ç", "–ø—è—Ç–µ—Ä–æ—á–∫–∞", "–ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫", "–ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫", "–∞—à–∞–Ω", "–ª–µ–Ω—Ç–∞", "–¥–∏–∫—Å–∏", 
            "–æ–∫–µ–π", "–º–µ—Ç—Ä–æ", "–∞–∑–±—É–∫–∞ –≤–∫—É—Å–∞", "–≤–∫—É—Å–≤–∏–ª–ª", "—Å–ø–∞—Ä", "spar", "auchan",
            "–º–∞–≥–Ω–æ–ª–∏—è", "–º–∏—Ä–∞—Ç–æ—Ä–≥", "–∫–∞—Ä—É—Å–µ–ª—å", "–≥–ª–æ–±—É—Å", "billa", "–±–∏–ª–ª–∞", "–≤–µ—Ä–Ω—ã–π",
            "–ª–∞–≤–∫–∞", "–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π", "—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç", "–≥–∏–ø–µ—Ä–º–∞—Ä–∫–µ—Ç", "–ø—Ä–æ–¥—É–∫—Ç—ã",
            # –ü—Ä–æ–¥—É–∫—Ç—ã
            "–µ–¥–∞", "–º–æ–ª–æ–∫–æ", "—Ö–ª–µ–±", "–æ–≤–æ—â–∏", "—Ñ—Ä—É–∫—Ç—ã", "–º—è—Å–æ", "—Ä—ã–±–∞",
            "—Å—ã—Ä", "—è–π—Ü–∞", "–º–∞—Å–ª–æ", "–π–æ–≥—É—Ä—Ç", "—Ç–≤–æ—Ä–æ–≥", "–∫–µ—Ñ–∏—Ä", "—Å–º–µ—Ç–∞–Ω–∞", "–∫–æ–ª–±–∞—Å–∞",
            "—Å–æ—Å–∏—Å–∫–∏", "–∫—É—Ä–∏—Ü–∞", "–∫–∞—Ä—Ç–æ—à–∫–∞", "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å", "–º–æ—Ä–∫–æ–≤—å", "–ª—É–∫", "—á–µ—Å–Ω–æ–∫",
            "–ø–æ–º–∏–¥–æ—Ä—ã", "–æ–≥—É—Ä—Ü—ã", "–∫–∞–ø—É—Å—Ç–∞", "–º–∞–∫–∞—Ä–æ–Ω—ã", "–∫—Ä—É–ø–∞", "—Ä–∏—Å", "–≥—Ä–µ—á–∫–∞",
            "—Å–∞—Ö–∞—Ä", "—Å–æ–ª—å", "–º—É–∫–∞", "–ø–µ—á–µ–Ω—å–µ", "–∫–æ–Ω—Ñ–µ—Ç—ã", "—à–æ–∫–æ–ª–∞–¥", "–≤–æ–¥–∞", "—Å–æ–∫"
        ],
        "–∫–∞—Ñ–µ": [
            "–∫–∞—Ñ–µ", "–∫–æ—Ñ–µ", "–∫–æ—Ñ–µ–π–Ω—è", "—Å—Ç–∞—Ä–±–∞–∫—Å", "starbucks", "—à–æ–∫–æ–ª–∞–¥–Ω–∏—Ü–∞", "–∫–æ—Ñ–µ–∏–Ω", "—á–∞–π", 
            "–∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è", "–ø–µ–∫–∞—Ä–Ω—è", "–±—É–ª–æ—á–Ω–∞—è", "–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "—É–∂–∏–Ω", 
            "–ø–∏—Ü—Ü–∞", "—Ñ–∞—Å—Ç—Ñ—É–¥", "–±—É—Ä–≥–µ—Ä", "—à–∞—É—Ä–º–∞", "–º–∞–∫–¥–æ–Ω–∞–ª–¥—Å", "kfc", "–±—É—Ä–≥–µ—Ä –∫–∏–Ω–≥",
            "costa coffee", "subway", "—Å–∞–±–≤–µ–π"
        ],
        "—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã": [
            "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–±–∞—Ä", "–ø–∞–±", "—Å—É—à–∏", "–ø–∏—Ü—Ü–∞", "–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã", "—è–Ω–¥–µ–∫—Å –µ–¥–∞", "–¥–µ–ª–∏–≤–µ—Ä–∏"
        ],
        "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": [
            "–º–µ—Ç—Ä–æ", "–∞–≤—Ç–æ–±—É—Å", "—Ç—Ä–∞–º–≤–∞–π", "—Ç—Ä–æ–ª–ª–µ–π–±—É—Å", "–º–∞—Ä—à—Ä—É—Ç–∫–∞", "—ç–ª–µ–∫—Ç—Ä–∏—á–∫–∞", 
            "–ø—Ä–æ–µ–∑–¥", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ø—Ä–æ–µ–∑–¥–Ω–æ–π", "—Ç—Ä–æ–π–∫–∞", "–∫–∞—Ä—Ç–∞ –º–µ—Ç—Ä–æ", "–±–µ–Ω–∑–∏–Ω", "–ø–∞—Ä–∫–æ–≤–∫–∞"
        ],
        "—Ç–∞–∫—Å–∏": [
            "—Ç–∞–∫—Å–∏", "—è–Ω–¥–µ–∫—Å —Ç–∞–∫—Å–∏", "uber", "—É–±–µ—Ä", "—Å–∏—Ç–∏–º–æ–±–∏–ª", "didi", "–ø–æ–µ–∑–¥–∫–∞"
        ],
        "–æ–¥–µ–∂–¥–∞": [
            "–æ–¥–µ–∂–¥–∞", "zara", "h&m", "uniqlo", "adidas", "nike", "reebok", "lamoda",
            "wildberries", "ozon", "–∫—É—Ä—Ç–∫–∞", "–±—Ä—é–∫–∏", "–¥–∂–∏–Ω—Å—ã", "—Ñ—É—Ç–±–æ–ª–∫–∞", "—Ä—É–±–∞—à–∫–∞",
            "–ø–ª–∞—Ç—å–µ", "—é–±–∫–∞", "–Ω–æ—Å–∫–∏", "–Ω–∏–∂–Ω–µ–µ –±–µ–ª—å–µ", "—à–∞–ø–∫–∞", "—à–∞—Ä—Ñ", "–ø–µ—Ä—á–∞—Ç–∫–∏"
        ],
        "–æ–±—É–≤—å": [
            "–æ–±—É–≤—å", "—Ç—É—Ñ–ª–∏", "–±–æ—Ç–∏–Ω–∫–∏", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "—Å–∞–ø–æ–≥–∏", "–∫–µ–¥—ã", "ecco", 
            "ralf ringer", "chester", "rendez-vous", "—Å–∞–Ω–¥–∞–ª–∏–∏", "—Ç–∞–ø–æ—á–∫–∏"
        ],
        "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": [
            "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–∏–≥—Ä—ã", "–∫–∏–Ω–æ", "—Ç–µ–∞—Ç—Ä", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–≤—ã—Å—Ç–∞–≤–∫–∞", "–º—É–∑–µ–π", 
            "–ø–∞—Ä–∫", "–∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã", "–±–æ—É–ª–∏–Ω–≥", "–±–∏–ª—å—è—Ä–¥", "–∫–≤–µ—Å—Ç", "—Å—Ç—Ä–∏–º", "–ø–æ–¥–ø–∏—Å–∫–∞",
            "–∫–∞—Ä–∞–æ–∫–µ", "–∫–ª—É–±"
        ],
        "–∑–¥–æ—Ä–æ–≤—å–µ": [
            "–∑–¥–æ—Ä–æ–≤—å–µ", "–∞–ø—Ç–µ–∫–∞", "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞", "–≤—Ä–∞—á", "–¥–æ–∫—Ç–æ—Ä", "–∫–ª–∏–Ω–∏–∫–∞", "–±–æ–ª—å–Ω–∏—Ü–∞", 
            "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "–∞–Ω–∞–ª–∏–∑—ã", "–≤–∏—Ç–∞–º–∏–Ω—ã", "36.6", "–æ–∑–µ—Ä–∫–∏", "—Å—Ç–æ–ª–∏—á–∫–∏", "–º–∞—Å—Å–∞–∂"
        ],
        "—Å–≤—è–∑—å": [
            "—Å–≤—è–∑—å", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–º—Ç—Å", "–±–∏–ª–∞–π–Ω", "–º–µ–≥–∞—Ñ–æ–Ω", "—Ç–µ–ª–µ2", "yota", "—Å–æ—Ç–æ–≤—ã–π", 
            "–º–æ–±–∏–ª—å–Ω—ã–π", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "wi-fi", "—Ä–æ—É—Ç–µ—Ä", "–º–æ–¥–µ–º", "—Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–µ"
        ],
        "–∫–æ–º–º—É–Ω–∞–ª–∫–∞": [
            "–∫–æ–º–º—É–Ω–∞–ª–∫–∞", "–∂–∫—Ö", "–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–≤–æ–¥–∞", "–≥–∞–∑", "–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", 
            "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–¥–æ–º", "–∂–∏–ª—å–µ", "–∞—Ä–µ–Ω–¥–∞", "—Å—ä–µ–º", "–Ω–∞–π–º"
        ],
        "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": [
            "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "—É—á–µ–±–∞", "—à–∫–æ–ª–∞", "–∏–Ω—Å—Ç–∏—Ç—É—Ç", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–∫—É—Ä—Å—ã", "—Ç—Ä–µ–Ω–∏–Ω–≥", 
            "–∫–Ω–∏–≥–∏", "—É—á–µ–±–Ω–∏–∫–∏", "—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä", "—Å–µ–º–∏–Ω–∞—Ä", "–≤–µ–±–∏–Ω–∞—Ä"
        ],
        "–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã": [
            "–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã", "—Ä—É—á–∫–∞", "–∫–∞—Ä–∞–Ω–¥–∞—à", "—Ç–µ—Ç—Ä–∞–¥—å", "–±–ª–æ–∫–Ω–æ—Ç", "–±—É–º–∞–≥–∞", "—Å—Ç–µ–ø–ª–µ—Ä",
            "—Å–∫—Ä–µ–ø–∫–∏", "–ø–∞–ø–∫–∞", "—Ñ–∞–π–ª—ã", "–º–∞—Ä–∫–µ—Ä", "–ª–∞—Å—Ç–∏–∫", "–ª–∏–Ω–µ–π–∫–∞", "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
        ],
        "–±—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è": [
            "–±—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è", "–º—ã–ª–æ", "—à–∞–º–ø—É–Ω—å", "–≥–µ–ª—å –¥–ª—è –¥—É—à–∞", "–∑—É–±–Ω–∞—è –ø–∞—Å—Ç–∞", "–∑—É–±–Ω–∞—è —â–µ—Ç–∫–∞",
            "—Å—Ç–∏—Ä–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ—à–æ–∫", "–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –¥–ª—è –±–µ–ª—å—è", "—Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –º—ã—Ç—å—è –ø–æ—Å—É–¥—ã",
            "—á–∏—Å—Ç—è—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ", "—Ç—É–∞–ª–µ—Ç–Ω–∞—è –±—É–º–∞–≥–∞", "—Å–∞–ª—Ñ–µ—Ç–∫–∏", "–±—É–º–∞–∂–Ω—ã–µ –ø–æ–ª–æ—Ç–µ–Ω—Ü–∞"
        ]
    }
    
    text = text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    for category, keywords in category_keywords.items():
        for keyword in keywords:
            if keyword in text:
                return category
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–¥—Ä—É–≥–æ–µ"
    return "–¥—Ä—É–≥–æ–µ"


async def get_or_create_category(db: Session, user_id: int, category_name: str, is_expense: bool = True) -> Category:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤/–¥–æ—Ö–æ–¥–æ–≤"""
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_name = category_name.lower().strip()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    try:
        recognized_category = categorize_transaction(category_name, db, user_id)
        if recognized_category:
            category_to_use = recognized_category
        else:
            # –ï—Å–ª–∏ LLM –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            recognized_category = recognize_category(category_name)
            category_to_use = recognized_category if recognized_category != "–¥—Ä—É–≥–æ–µ" else category_name
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ LLM –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        recognized_category = recognize_category(category_name)
        category_to_use = recognized_category if recognized_category != "–¥—Ä—É–≥–æ–µ" else category_name
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = db.query(Category).filter(
        Category.user_id == user_id,
        func.lower(Category.name) == category_to_use,
        Category.is_expense == (1 if is_expense else 0)
    ).first()
    
    if not category:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        emoji = get_category_emoji(category_to_use)
        category = Category(
            user_id=user_id,
            name=category_to_use,
            emoji=emoji,
            is_expense=1 if is_expense else 0
        )
        db.add(category)
        db.commit()
        db.refresh(category)
        
    return category


def parse_transaction_message(text: str) -> Optional[Dict[str, Any]]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - 500 –æ–±–µ–¥
    - -500 —Ç–∞–∫—Å–∏
    - +50000 –∑–∞—Ä–ø–ª–∞—Ç–∞
    - 100 USD –∫–Ω–∏–≥–∏
    - 250 —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤—á–µ—Ä–∞
    - 1500 –ø–æ–¥–∞—Ä–æ–∫ @–∏–≤–∞–Ω
    
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
    """
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        parts = text.strip().split()
        
        if len(parts) < 2:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –∏ –∑–Ω–∞–∫
        amount_str = parts[0].replace(',', '.')
        is_expense = True
        
        if amount_str.startswith('+'):
            is_expense = False
            amount_str = amount_str[1:]
        elif amount_str.startswith('-'):
            amount_str = amount_str[1:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —á–∏—Å–ª–æ–º
        try:
            amount = float(amount_str)
        except ValueError:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
        currency = "RUB"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É–±–ª–∏
        currency_idx = 1
        
        if len(parts) > 1 and parts[1].upper() in ["USD", "EUR", "RUB"]:
            currency = parts[1].upper()
            currency_idx = 2
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ —Å—É–º–º—ã –∏ –≤–∞–ª—é—Ç—ã)
        description = " ".join(parts[currency_idx:])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        date_keywords = ["–≤—á–µ—Ä–∞", "–ø–æ–∑–∞–≤—á–µ—Ä–∞", "—Å–µ–≥–æ–¥–Ω—è"]
        transaction_date = datetime.now()
        
        for keyword in date_keywords:
            if keyword in description.lower():
                if keyword == "–≤—á–µ—Ä–∞":
                    transaction_date = datetime.now() - timedelta(days=1)
                elif keyword == "–ø–æ–∑–∞–≤—á–µ—Ä–∞":
                    transaction_date = datetime.now() - timedelta(days=2)
                # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–∞—Ç—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                description = description.replace(keyword, "").strip()
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mentioned_user = None
        if "@" in description:
            parts = description.split()
            for part in parts:
                if part.startswith("@"):
                    mentioned_user = part[1:]  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª @
                    # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                    description = description.replace(part, "").strip()
                    break
        
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ (–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ)
        original_amount = amount
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏, –µ—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ —Ä—É–±–ª–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        if currency == "USD":
            amount *= 90  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
        elif currency == "EUR":
            amount *= 100  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
        
        return {
            "amount": amount,
            "original_amount": original_amount,
            "currency": currency,
            "description": description,
            "date": transaction_date,
            "is_expense": is_expense,
            "mentioned_user": mentioned_user
        }
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        return None


@router.message(F.text.regexp(r'^(-|\+)?\d+(?:[.,]\d+)?(?:\s+\S+)+$'))
async def process_transaction(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:
    - 500 –æ–±–µ–¥
    - -500 —Ç–∞–∫—Å–∏
    - +50000 –∑–∞—Ä–ø–ª–∞—Ç–∞
    - 100 USD –∫–Ω–∏–≥–∏
    - 250 —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤—á–µ—Ä–∞
    - 1500 –ø–æ–¥–∞—Ä–æ–∫ @–∏–≤–∞–Ω
    """
    user_id = message.from_user.id
    
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        transaction_data = parse_transaction_message(message.text)
        
        if not transaction_data:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            user = db.query(User).filter(User.telegram_id == user_id).first()
            
            if not user:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Å /start
                await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            default_categories = [
                "–ø—Ä–æ–¥—É–∫—Ç—ã", "–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "—Ç–∞–∫—Å–∏", 
                "–æ–¥–µ–∂–¥–∞", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–∑–¥–æ—Ä–æ–≤—å–µ", "—Å–≤—è–∑—å", "–∫–æ–º–º—É–Ω–∞–ª–∫–∞", 
                "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "—Å–ø–æ—Ä—Ç", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ø–æ–¥–∞—Ä–∫–∏", "—Ç–µ—Ö–Ω–∏–∫–∞",
                "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–æ—Ö–æ–¥", "–¥—Ä—É–≥–æ–µ"
            ]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_categories = db.query(Category).filter(
                Category.user_id == user.id,
                Category.is_expense == (1 if transaction_data["is_expense"] else 0)
            ).all()
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
            if user_categories:
                categories_list = [category.name for category in user_categories]
            else:
                categories_list = default_categories
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            description = transaction_data["description"]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
            llm_category = categorize_transaction(description, db, user.id)
            
            # –ï—Å–ª–∏ LLM –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ "–¥—Ä—É–≥–æ–µ", –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Ç–æ—á–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if llm_category == "–¥—Ä—É–≥–æ–µ":
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                categories_text = ", ".join(categories_list)
                
                await message.answer(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <b>{description}</b>\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏:\n"
                    f"<i>{categories_text}</i>\n\n"
                    f"–ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>–¥—Ä—É–≥–æ–µ</b>.",
                    parse_mode=ParseMode.HTML
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "–¥—Ä—É–≥–æ–µ"
                category_name = "–¥—Ä—É–≥–æ–µ"
            else:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ LLM –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
                if llm_category in categories_list:
                    category_name = llm_category
                else:
                    logging.warning(f"LLM –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: '{llm_category}'. –ò—Å–ø–æ–ª—å–∑—É–µ–º '–¥—Ä—É–≥–æ–µ'")
                    category_name = "–¥—Ä—É–≥–æ–µ"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = await get_or_create_category(
                db, 
                user.id, 
                category_name, 
                transaction_data["is_expense"]
            )
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction = Transaction(
                user_id=user.id,
                amount=transaction_data["amount"],
                original_amount=transaction_data["original_amount"],
                currency=transaction_data["currency"],
                category_id=category.id,
                description=message.text,
                transaction_date=transaction_data["date"],
                is_expense=1 if transaction_data["is_expense"] else 0,
                mentioned_user=transaction_data["mentioned_user"]
            )
            
            db.add(transaction)
            
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É expenses
            if transaction_data["is_expense"]:
                expense = ExpenseModel(
                    user_id=user.id,
                    amount=transaction_data["amount"],
                    category=category_name,
                    description=message.text,
                    created_at=transaction_data["date"]
                )
                db.add(expense)
                
            db.commit()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ —Å—Ç–∏–ª–µ Cointry
            formatted_amount = format_amount(transaction_data["amount"], transaction_data["currency"])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction_type = "—Ä–∞—Å—Ö–æ–¥" if transaction_data["is_expense"] else "–¥–æ—Ö–æ–¥"
            icon = "‚ûñ" if transaction_data["is_expense"] else "‚ûï"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            date_str = ""
            if transaction_data["date"].date() != datetime.now().date():
                date_str = f" ({transaction_data['date'].strftime('%d.%m.%Y')})"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            mention_str = ""
            if transaction_data["mentioned_user"]:
                mention_str = f" –¥–ª—è @{transaction_data['mentioned_user']}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Cointry
            await message.answer(
                f"<b>{category.emoji} {category.name.capitalize()}</b>{date_str}{mention_str}\n"
                f"{icon} {formatted_amount} {transaction_data['currency']}",
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            db.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            db.close()
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 