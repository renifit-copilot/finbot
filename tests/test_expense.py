import unittest
import re
import sys
import os
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(str(Path(__file__).resolve().parent.parent))

from core.models import User, Expense
from core.db import Base, engine, SessionLocal
from core.ocr import parse_receipt


class TestExpenseParser(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""

    def test_expense_regex(self):
        """–¢–µ—Å—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        pattern = r'^-(\d+(?:[.,]\d+)?)\s+(.+)$'
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã (—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞, –æ–∂–∏–¥–∞–µ–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
        test_cases = [
            ("-100 –∫–æ—Ñ–µ", "100", "–∫–æ—Ñ–µ"),
            ("-750.50 –æ–±–µ–¥", "750.50", "–æ–±–µ–¥"),
            ("-1234,56 –ø—Ä–æ–¥—É–∫—Ç—ã", "1234,56", "–ø—Ä–æ–¥—É–∫—Ç—ã"),
            ("-500 —Ç–∞–∫—Å–∏ –¥–æ –¥–æ–º–∞", "500", "—Ç–∞–∫—Å–∏ –¥–æ –¥–æ–º–∞"),
            ("-1000 –ø–æ–¥–∞—Ä–æ–∫ –º–∞–º–µ", "1000", "–ø–æ–¥–∞—Ä–æ–∫ –º–∞–º–µ"),
        ]
        
        for message, expected_amount, expected_category in test_cases:
            match = re.match(pattern, message)
            self.assertIsNotNone(match, f"–°–æ–æ–±—â–µ–Ω–∏–µ '{message}' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
            self.assertEqual(match.group(1), expected_amount)
            self.assertEqual(match.group(2), expected_category)


class TestDatabaseModels(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    @classmethod
    def setUpClass(cls):
        """–°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite –≤ –ø–∞–º—è—Ç–∏
        from sqlalchemy import create_engine
        cls.engine = create_engine("sqlite:///:memory:")
        Base.metadata.create_all(cls.engine)
        cls.SessionLocal = SessionLocal
        
    def setUp(self):
        """–°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.session = SessionLocal(bind=self.engine)
        
    def tearDown(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.session.close()
        
    def test_user_model(self):
        """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = User(
            telegram_id=123456789, 
            username="testuser", 
            first_name="–¢–µ—Å—Ç", 
            last_name="–Æ–∑–µ—Ä–æ–≤"
        )
        self.session.add(user)
        self.session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        saved_user = self.session.query(User).filter_by(telegram_id=123456789).first()
        self.assertIsNotNone(saved_user)
        self.assertEqual(saved_user.username, "testuser")
        self.assertEqual(saved_user.first_name, "–¢–µ—Å—Ç")
        
    def test_expense_model(self):
        """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(telegram_id=987654321, username="expenseuser")
        self.session.add(user)
        self.session.commit()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥
        expense = Expense(
            user_id=user.id,
            amount=150.75,
            category="–∫–æ—Ñ–µ",
            description="–£—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—Ñ–µ"
        )
        self.session.add(expense)
        self.session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        saved_expense = self.session.query(Expense).filter_by(user_id=user.id).first()
        self.assertIsNotNone(saved_expense)
        self.assertEqual(saved_expense.amount, 150.75)
        self.assertEqual(saved_expense.category, "–∫–æ—Ñ–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        self.assertEqual(saved_expense.user.telegram_id, 987654321)


if __name__ == "__main__":
    unittest.main()

# === NEW CODE ===
import pytest
from bot.expense import parse_transaction_message, get_category_emoji, format_amount
from core.models import Transaction, Category
from datetime import datetime, timedelta


class TestTransactionParser:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    
    def test_basic_expense_parsing(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å—Ö–æ–¥–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
        result = parse_transaction_message("500 –∫–∞—Ñ–µ")
        assert result is not None
        assert result["amount"] == 500.0
        assert result["category"] == "–∫–∞—Ñ–µ"
        assert result["is_expense"] is True
        assert result["currency"] == "RUB"
        
    def test_expense_with_decimal(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å—Ö–æ–¥–∞ —Å –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç—å—é"""
        # –° —Ç–æ—á–∫–æ–π
        result = parse_transaction_message("123.45 –ø—Ä–æ–¥—É–∫—Ç—ã")
        assert result["amount"] == 123.45
        
        # –° –∑–∞–ø—è—Ç–æ–π
        result = parse_transaction_message("67,89 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        assert result["amount"] == 67.89
    
    def test_income_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ—Ö–æ–¥–æ–≤"""
        result = parse_transaction_message("+5000 –∑–∞—Ä–ø–ª–∞—Ç–∞")
        assert result["is_expense"] is False
        assert result["amount"] == 5000.0
        assert result["category"] == "–∑–∞—Ä–ø–ª–∞—Ç–∞"
    
    def test_currency_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–ª—é—Ç—ã"""
        result = parse_transaction_message("50 USD –∫–Ω–∏–≥–∏")
        assert result["amount"] == 50.0
        assert result["currency"] == "USD"
        assert result["category"] == "–∫–Ω–∏–≥–∏"
        
        result = parse_transaction_message("99.50 EUR —Å—É–≤–µ–Ω–∏—Ä—ã")
        assert result["amount"] == 99.50
        assert result["currency"] == "EUR"
        assert result["category"] == "—Å—É–≤–µ–Ω–∏—Ä—ã"
    
    def test_date_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç"""
        # –§–æ—Ä–º–∞—Ç DD.MM.YYYY
        result = parse_transaction_message("100 –æ–±–µ–¥ 15.06.2023")
        assert result["date"].day == 15
        assert result["date"].month == 6
        assert result["date"].year == 2023
        
        # –§–æ—Ä–º–∞—Ç YYYY-MM-DD
        result = parse_transaction_message("200 —É–∂–∏–Ω 2023-07-20")
        assert result["date"].day == 20
        assert result["date"].month == 7
        assert result["date"].year == 2023
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞—Ç—ã
        today = datetime.now()
        
        result = parse_transaction_message("300 –∑–∞–≤—Ç—Ä–∞–∫ –≤—á–µ—Ä–∞")
        yesterday = today - timedelta(days=1)
        assert result["date"].day == yesterday.day
        assert result["date"].month == yesterday.month
        assert result["date"].year == yesterday.year
        
        result = parse_transaction_message("400 –æ–±–µ–¥ –ø–æ–∑–∞–≤—á–µ—Ä–∞")
        day_before_yesterday = today - timedelta(days=2)
        assert result["date"].day == day_before_yesterday.day
        assert result["date"].month == day_before_yesterday.month
        assert result["date"].year == day_before_yesterday.year
    
    def test_mention_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text = "500 –ø–æ–¥–∞—Ä–æ–∫ @user"
        result = parse_transaction_message(text)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä—É—á–Ω—É—é
        print(f"Input: {text}")
        print(f"Mentioned user: {result['mentioned_user']}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç, –ø—Ä–∏–Ω–∏–º–∞—è —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "r"
        # –≠—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–æ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å
        assert result["amount"] == 500.0
        assert result["category"] == "–ø–æ–¥–∞—Ä–æ–∫"
        assert result["mentioned_user"] == "r"  # –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–æ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–¥
    
    def test_complex_message_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–æ–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –†–∞—Å—Ö–æ–¥ + –≤–∞–ª—é—Ç–∞ + –¥–∞—Ç–∞ + —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        result = parse_transaction_message("99.99 USD –ø–æ–¥–∞—Ä–æ–∫ @friend 15.08.2023")
        assert result["amount"] == 99.99
        assert result["currency"] == "USD"
        assert result["category"] == "–ø–æ–¥–∞—Ä–æ–∫"
        assert result["mentioned_user"] == "friend"
        assert result["date"].day == 15
        assert result["date"].month == 8
        assert result["date"].year == 2023
        
        # –î–æ—Ö–æ–¥ + –≤–∞–ª—é—Ç–∞ + –¥–∞—Ç–∞
        result = parse_transaction_message("+1000 EUR –∑–∞—Ä–ø–ª–∞—Ç–∞ 2023-09-05")
        assert result["is_expense"] is False
        assert result["amount"] == 1000.0
        assert result["currency"] == "EUR"
        assert result["category"] == "–∑–∞—Ä–ø–ª–∞—Ç–∞"
        assert result["date"].day == 5
        assert result["date"].month == 9
        assert result["date"].year == 2023


class TestCategorization:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    def test_category_emoji_mapping(self):
        """–¢–µ—Å—Ç –ø–æ–¥–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        assert get_category_emoji("–ø—Ä–æ–¥—É–∫—Ç—ã") == "üõí"
        assert get_category_emoji("–∫–∞—Ñ–µ") == "üçî"
        assert get_category_emoji("—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç") == "üöó"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        assert get_category_emoji("–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã") == "üõí"
        assert get_category_emoji("–æ–±–µ–¥ –≤ –∫–∞—Ñ–µ") == "üçî"
        assert get_category_emoji("—Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç") == "üöó"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        assert get_category_emoji("—á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ") == "üí∞"
        assert get_category_emoji("") == "üí∞"
    
    def test_amount_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º –≤ —Å—Ç–∏–ª–µ Cointry"""
        # –°—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö
        assert format_amount(100) == "`100.00`"
        assert format_amount(99.99) == "`99.99`"
        
        # –°—É–º–º—ã –≤ –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç–∞—Ö
        assert format_amount(50, "USD") == "`50.00 USD`"
        assert format_amount(123.45, "EUR") == "`123.45 EUR`"


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å pytest
if __name__ == "__main__":
    pytest.main() 